#!/usr/bin/env python
import os
import logging
import json
from argparse import ArgumentParser

from pubtools.pulplib import Client

log = logging.getLogger("get-maintenance")


def unassociate(client, repo_id, type_ids, filters):
    repo = client.get_repository(repo_id).result()
    log.info(filters)
    result = repo.unassociate_unit(type_ids, filters).result()

    log.info('task finished: %s', result)

def make_client(args):
    auth = None

    if args.username:
        password = args.password
        if password is None:
            password = os.environ.get("PULP_PASSWORD")
        if not password:
            log.warning("No password provided for %s", args.username)
        auth = (args.username, args.password)

    return Client(args.url, auth=auth, verify=not args.insecure)


def main():
    log.setLevel(logging.INFO)
    logging.basicConfig(format="%(message)s", level=logging.INFO)

    parser = ArgumentParser(description="Unassociate unit from pulp repo")
    parser.add_argument("--url", help="Pulp server URL")
    parser.add_argument("--username", help="Pulp username")
    parser.add_argument(
        "--password", help="Pulp password (or set PULP_PASSWORD in env)"
    )
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--insecure", default=False, action="store_true")
    parser.add_argument("--filters", type=str, help="filters for unassociating units")
    parser.add_argument("--type-ids", action='append')
    parser.add_argument("--repo-id", action='store')

    p = parser.parse_args()

    if not p.url:
        parser.error("--url is required")

    if not p.repo_id:
        parser.error("--repo-id is required")

    if not p.type_ids:
        parser.error("--type-ids is required")

    if not p.filters:
        parser.error("--filters is required")

    if p.debug:
        logging.getLogger("pubtools.pulplib").setLevel(logging.DEBUG)
        log.setLevel(logging.DEBUG)


    client = make_client(p)
    return unassociate(client, p.repo_id, p.type_ids, json.loads(p.filters))

if __name__ == "__main__":
    main()
